service: academy-api
provider:
  name: aws
  runtime: dotnet6
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc}
  stage: ${opt:stage}
  # TODO: Enable this line if DynamoDb is in use
  #account: ${opt:account}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./bin/release/net6.0/academy-api.zip

functions:
  academyApi:
    name: ${self:service}-${self:provider.stage}
    handler: AcademyApi::AcademyApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
# TODO: Create ssm variables for this API's postgres mirror
# TODO: Remove this line if DynamoDb is being used
      CONNECTION_STRING: Server=${ssm:/academy-api/${self:provider.stage}/db-hostname},${ssm:/academy-api/${self:provider.stage}/db-port};Database=${ssm:/academy-api/${self:provider.stage}/db-database};User Id=${ssm:/academy-api/${self:provider.stage}/db-username};Password=${ssm:/academy-api/${self:provider.stage}/db-password};
    events:
      - http:
          path: /{proxy+}
          method: ANY
#          authorizer:
#            arn: ${ssm:/api-authenticator/${self:provider.stage}/arn}
#            type: request
#            resultTtlInSeconds: 0
#            identitySource: method.request.header.Authorization
#            managedExternally: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - If-Match
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-correlation-id
            allowCredentials: false
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"

custom:
  vpc:
    securityGroupIds:
      - 'sgr-052101feb454122ef'
    subnetIds:
      - 'subnet-0144886d7ba21a972'
      - 'subnet-0e67e260d1faf2bbb'
      - 'subnet-035e6677a7a514366'
      - 'subnet-0192786edcba28f41'
